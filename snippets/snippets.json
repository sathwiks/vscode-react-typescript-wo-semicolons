{
	"React Component": {
		"prefix": "tsrcc",
		"body": [
			"import * as React from 'react'",
			"",
			"export interface ${1:App}Props {",
			"}",
			"",
			"export default class ${1:} extends React.Component<${1:}Props, any> {",
			"  render() {",
			"    return (",
			"      <div>",
			"        ${2:}",
			"      </div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "Create a React Component with typescript."
	},
	"React Component - Full": {
		"prefix": "tsrcfull",
		"body": [
			"import * as React from 'react'",
			"",
			"export interface ${1:App}Props {",
			"}",
			"",
			"export interface ${1:App}State {",
			"}",
			"",
			"export default class ${1:} extends React.Component<${1:}Props, ${1:}State> {",
			"  constructor(props: ${1:}Props) {",
			"    super(props)",
			"",
			"        this.state = {",
			"    }",
			"  }",
			"",
			"  render() {",
			"    return (",
			"      <div>",
			"        ${2:}",
			"      </div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "Create a stateful React Component with typescript with Props, State, and a constructor."
	},
	"React Component without import and export": {
		"prefix": "tsrcjc",
		"body": [
			"export interface ${1:App}Props {",
			"}",
			"",
			"class ${1:} extends React.Component<${1:}Props, any> {",
			"  render() {",
			"    return (",
			"      <div>",
			"        ${2:}",
			"      </div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "Create a React Component without import and export."
	},
	"React PureComponent": {
		"prefix": "tsrpcc",
		"body": [
			"import * as React from 'react'",
			"",
			"export interface ${1:App}Props {",
			"}",
			"",
			"export default class ${1:} extends React.PureComponent<${1:}Props, any> {",
			"  render() {",
			"    return (",
			"      <div>",
			"        ${2:}",
			"      </div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "Create a React PureComponent."
	},
	"React PureComponent without import and export": {
		"prefix": "tsrpcjc",
		"body": [
			"export interface ${1:App}Props {",
			"}",
			"",
			"class ${1:} extends React.PureComponent<${1:}Props, any> {",
			"  render() {",
			"    return (",
			"      <div>",
			"        ${2:}",
			"      </div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "Create a React PureComponent without import and export."
	},
	"React Pure Function Component": {
		"prefix": "tsrpfc",
		"body": [
			"import * as React from 'react'",
			"",
			"export interface ${1:App}Props {",
			"}",
			"",
			"export function ${1:} (props: ${1:}Props) {",
			"    return (",
			"      <div>",
			"        ${0}",
			"      </div>",
			"    )",
			"}",
			""
		],
		"description": "Create a React Pure Function Component."
	},
	"React Stateless Functional Component": {
		"prefix": "tsrsfc",
		"body": [
			"import * as React from 'react'",
			"",
			"interface ${1:App}Props {$2",
			"}",
			"",
			"const $1: React.SFC<$1Props> = (props) => {",
			"  return $0",
			"}",
			"",
			"export default $1"
		],
		"description": "Create a React Stateless Functional Component."
	},
	"constructor": {
		"prefix": "conc",
		"body": [
			"constructor(props) {",
			"  super(props)",
			"  ${1:}",
			"}"
		],
		"description": "Add a constructor in class."
	},
	"componentWillMount": {
		"prefix": "cwm",
		"body": [
			"componentWillMount() {",
			"  ${1:}",
			"}"
		],
		"description": "Invoked immediately before mounting occurs. It is called before render()."
	},
	"render": {
		"prefix": "ren",
		"body": [
			"render() {",
			"  return (",
			"    ${1:}",
			"  )",
			"}"
		],
		"description": "When called, it should examine this.props and this.state and return a single React element."
	},
	"componentDidMount": {
		"prefix": "cdm",
		"body": [
			"componentDidMount() {",
			"  ${1:}",
			"}"
		],
		"description": "Invoked immediately after a component is mounted."
	},
	"componentWillReceiveProps": {
		"prefix": "cwrp",
		"body": [
			"componentWillReceiveProps(nextProps: ${1:}) {",
			"  ${2:}",
			"}"
		],
		"description": "Invoked before a mounted component receives new props."
	},
	"shouldComponentUpdate": {
		"prefix": "scu",
		"body": [
			"shouldComponentUpdate(nextProps: ${1:}, nextState) {",
			"  ${2:}",
			"}"
		],
		"description": "Invoked before rendering when new props or state are being received."
	},
	"componentWillUpdate": {
		"prefix": "cwu",
		"body": [
			"componentWillUpdate(nextProps: ${1:}, nextState) {",
			"  ${2:}",
			"}"
		],
		"description": "Invoked immediately before rendering when new props or state are being received."
	},
	"componentDidUpdate": {
		"prefix": "cdu",
		"body": [
			"componentDidUpdate(prevProps: ${1:}, prevState) {",
			"  ${2:}",
			"}"
		],
		"description": "Invoked immediately after updating occurs. This method is not called for the initial render"
	},
	"componentWillUnmount": {
		"prefix": "cwum",
		"body": [
			"componentWillUnmount() {",
			"  ${1:}",
			"}"
		],
		"description": "Invoked immediately before a component is unmounted and destroyed"
	},
	"componentSetState": {
		"prefix": "sst",
		"body": [
			"this.setState(${1:})"
		],
		"description": "Performs a shallow merge of nextState into current state"
	},
	"bind method": {
		"prefix": "bnd",
		"body": [
			"this.${1:} = this.${1:}.bind(this)"
		],
		"description": "bind this in method"
	},
	"method": {
		"prefix": "met",
		"body": [
			"${1:methodName} = (${2:e}) => {",
			"  ${3:}",
			"}"
		],
		"description": "Create a method"
	},
	"React redux container": {
		"prefix": "tscntr",
		"body": [
			"import * as React from 'react'",
			"import { connect } from 'react-redux'",
			"",
			"export interface ${1:App}Props {",
			"}",
			"",
			"class ${1:} extends React.Component<${1:}Props, any> {",
			"  render() {",
			"    return (",
			"      <div>",
			"        ${2:}",
			"      </div>",
			"    )",
			"  }",
			"}",
			"",
			"const mapState2Props = state => {",
			"  return {",
			"  }",
			"}",
			"",
			"export default connect(mapState2Props)(${1:})",
			""
		],
		"description": "React Redux container"
	},
	"import": {
		"prefix": "imt",
		"body": [
			"import { $2 } from '$1'"
		],
		"description": "Create a import"
	}
}
